if(deleteoutput) unlink(list.dirs()[-1],recursive = T,force = T)
if(deleteoutput) file.remove(list.files())
context("analyseRuns Tess")
cat("analyseRuns Tess\n")
analyseRuns(tfiles)
test_that("check output",{
expect_equal(any(grepl("tabulateQ.txt",list.files())),TRUE)
expect_equal(any(grepl("summariseQ.txt",list.files())),TRUE)
expect_equal(any(grepl("tess_01.png",list.files())),TRUE)
expect_equal(any(grepl("tess_21.png",list.files())),TRUE)
expect_equal(any(grepl("./pop_K2",list.dirs())),TRUE)
expect_equal(any(grepl("./pop_K8",list.dirs())),TRUE)
})
if(deleteoutput) unlink(list.dirs()[-1],recursive = T,force = T)
if(deleteoutput) file.remove(list.files())
context("analyseRuns Admixture")
cat("analyseRuns Admixture\n")
analyseRuns(afiles)
test_that("check output",{
expect_equal(any(grepl("tabulateQ.txt",list.files())),TRUE)
expect_equal(any(grepl("summariseQ.txt",list.files())),TRUE)
expect_equal(any(grepl("admixture_01.png",list.files())),TRUE)
expect_equal(any(grepl("admixture_10.png",list.files())),TRUE)
expect_equal(any(grepl("./pop_K2",list.dirs())),TRUE)
})
if(deleteoutput) unlink(list.dirs()[-1],recursive = T,force = T)
if(deleteoutput) file.remove(list.files())
# distructExport Structure -----------------------------------------------------
context("distructExport Structure")
cat("distructExport Structure\n")
grps1 <- read.delim(system.file("files/structuregrplabels.txt",package="pophelper"),header=FALSE)
#ind one file
distructExport(qlist = readQ(sfiles)[1])
test_that("destructExport structure one file",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#both top and bottom labels
distructExport(readQ(sfiles)[1],grplabbottom=as.character(grps1$V1),grplabtop=as.character(grps1$V1),grpmean=T)
test_that("destructExport structure top and bottom labels",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#both top and bottom labels quiet
distructExport(readQ(sfiles)[1],grplabbottom=as.character(grps1$V1),grplabtop=as.character(grps1$V1),quiet=T)
test_that("destructExport structure top and botoom labels quiet",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#no bottom labels
distructExport(readQ(sfiles)[1],grplabbottom=NA,grplabtop=as.character(grps1$V1))
test_that("destructExport structure no bottom labels",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#no top labels
distructExport(readQ(sfiles)[1],grplabbottom=as.character(grps1$V1),grplabtop=NA)
test_that("destructExport structure no top labels",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#no both labels
distructExport(readQ(sfiles)[1],grplabbottom=NA,grplabtop=NA)
test_that("destructExport structure both labels",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#multiple files
distructExport(readQ(sfiles)[2:5],grplabbottom=as.character(grps1$V1))
test_that("destructExport structure multiple files",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#pop mean true
distructExport(readQ(sfiles)[1],grplabbottom=as.character(grps1$V1),grpmean=T)
test_that("destructExport structure popmean true",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#multiple files with popmean
distructExport(readQ(sfiles)[2:5],grplabbottom=as.character(grps1$V1),grpmean=T)
test_that("destructExport structure multiple files",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#other colours
distructExport(readQ(sfiles)[1],grplabbottom=as.character(grps1$V1),clustercol=pophelper:::distructColours()[43:44])
test_that("destructExport structure other colours",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#multiple files use exe
distructExport(readQ(sfiles)[2:5],grplabbottom=as.character(grps1$V1),useexe=T)
test_that("destructExport structure use exe",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#multiple files popmean use exe
distructExport(readQ(sfiles)[2:5],grplabbottom=as.character(grps1$V1),grpmean=T,useexe=T)
test_that("destructExport structure popmean use exe",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#other colours use exe
distructExport(readQ(sfiles)[1],grplabbottom=as.character(grps1$V1),clustercol=pophelper:::distructColours()[43:44],useexe=T)
test_that("destructExport structure other colours use exe",{
expect_equal(any(grepl("drawparams",list.files("./structure_01-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
# distructExport Tess ----------------------------------------------------------
context("exportDistruct Tess")
cat("distructExport Tess\n")
grps1 <- read.delim(system.file("files/tessgrplabels.txt",package="pophelper"),header=FALSE)
#both top and bottom labels
distructExport(readQ(tfiles)[3],grplabbottom=as.character(grps1$V1),grplabtop=as.character(grps1$V1))
test_that("exportDistruct Tess top and bottom labels",{
expect_equal(any(grepl("drawparams",list.files("./tess_03-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#both top and bottom labels quiet
distructExport(readQ(tfiles)[3],grplabbottom=as.character(grps1$V1),grplabtop=as.character(grps1$V1),quiet=T)
test_that("exportDistruct Tess top and bottom labels quiet",{
expect_equal(any(grepl("drawparams",list.files("./tess_03-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#no bottom labels
distructExport(readQ(tfiles)[3],grplabbottom=NA,grplabtop=as.character(grps1$V1))
test_that("exportDistruct Tess no bottom labels",{
expect_equal(any(grepl("drawparams",list.files("./tess_03-distruct"))),TRUE)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#multiple files
distructExport(readQ(tfiles)[2:5],grplabbottom=as.character(grps1$V1))
test_that("exportDistruct Tess multiple files",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#multiple files with popmean
distructExport(readQ(tfiles)[2:5],grplabbottom=as.character(grps1$V1),grpmean=T)
test_that("exportDistruct Tess pop mean",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
# distructExport basic --------------------------------------------------------
context("distructExport Other formats")
cat("distructExport Basic\n")
#admixture multiple
distructExport(qlist = readQ(afiles)[1:4],grpmean=F)
test_that("exportDistruct Admixture",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#admixture multiple popmean
distructExport(qlist = readQ(afiles)[1:4],grpmean=T)
test_that("exportDistruct Admixture pop mean",{
expect_equal(length(list.files()),4)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#faststructure
distructExport(qlist = readQ(ffiles)[2:3],grpmean=F)
test_that("exportDistruct faststructure",{
expect_equal(length(list.files()),2)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#basic files comma
distructExport(qlist = readQ(mcfiles)[2:3],grpmean=F)
test_that("exportDistruct basic Comma",{
expect_equal(length(list.files()),2)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#basic files tab
distructExport(qlist = readQ(mtfiles)[2:3],grpmean=F)
test_that("exportDistruct basic tab",{
expect_equal(length(list.files()),2)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#basic files space
distructExport(qlist = readQ(msfiles)[2:3],grpmean=F)
test_that("exportDistruct basic space",{
expect_equal(length(list.files()),2)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#tab no popmean
distructExport(qlist = readQ(tabs1),grpmean=F)
test_that("exportDistruct Admixture",{
expect_equal(length(list.files()),7)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#tab popmean
distructExport(qlist = readQ(tabs1),grpmean=T)
test_that("exportDistruct Admixture",{
expect_equal(length(list.files()),7)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
#tab no popmean use exe
distructExport(qlist = readQ(tabs1),useexe=T)
test_that("exportDistruct Admixture",{
expect_equal(length(list.files()),7)
})
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
# Deprecated -------------------------------------------------------------------
expect_error(tabulateRunsStructure(sfiles))
expect_error(tabulateRunsTess(tfiles))
expect_error(tabulateRunsMatrix(afiles))
expect_error(summariseRunsStructure(tabulateRunsStructure(sfiles)))
expect_error(summariseRunsTess(tabulateRunsTess(tfiles)))
expect_error(summariseRunsMatrix(tabulateRunsMatrix(tfiles)))
expect_error(clumppExportStructure(sfiles))
expect_error(clumppExportTess(tfiles))
expect_error(clumppExportMatrix(afiles))
expect_error(runsToDfStructure(sfiles))
expect_error(runsToDfTess(tfiles))
expect_error(runsToDfMatrix(afiles))
# End --------------------------------------------------------------------------
setwd(currwd)
if(deleteoutput) unlink("pophelper-demo",recursive = T,force = T)
cat("plotMultiline\n")
#plotMultiline
context("plotMultiline STRUCTURE")
plotMultiline(slist[1])
test_that("sfiles 1 check output",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1],sortind="Cluster1")
test_that("sfiles 1 check output sort cluster",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1])
library(pophelper)
plotMultiline(slist[1])
test_that("sfiles 1 check output",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1],sortind="Cluster1")
test_that("sfiles 1 check output sort cluster",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1],sortind="all")
test_that("sfiles 1 check output sort all",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1:2])
test_that("sfiles >1 check output",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1:2],sortind="Cluster1")
test_that("sfiles >1 sort cluster",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1:2],sortind="all")
test_that("sfiles >1 sort all",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1:2],sortind=NA,useindlab=T)
test_that("sfiles 1 sort NA indlabfromfile",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1:2],sortind="all",indlab=T)
test_that("sfiles 1 sort all indlabfromfile=T",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
inds <- read.delim(system.file("files/structureindlabels.txt",package="pophelper"),header=FALSE,stringsAsFactors=F)
rownames(slist[[1]]) <- inds$V1
plotMultiline(slist[1],useindlab=T)
test_that("sfiles 1 indlab",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
plotMultiline(slist[1],sortind="Cluster1",useindlab=T)
test_that("sfiles 1 check output sort cluster1 indlab",{
expect_equal(any(grepl("structure",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("structure",list.files())])
context("plotMultiline TESS")
tlist <- readQ(tfiles)
plotMultiline(tlist[1])
test_that("tfiles 1 check output",{
expect_equal(any(grepl("tess",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("tess",list.files())])
plotMultiline(tlist[1:2])
test_that("tfiles >1 check output",{
expect_equal(any(grepl("tess",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("tess",list.files())])
plotMultiline(tlist[1:2],sortind="Cluster1")
test_that("tfiles >1 check output sort cluster",{
expect_equal(any(grepl("tess",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("tess",list.files())])
plotMultiline(tlist[1:2],sortind="all")
test_that("tfiles >1 check output",{
expect_equal(any(grepl("tess",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("tess",list.files())])
context("plotMultiline ADMIXTURE")
alist <- readQ(afiles)
plotMultiline(alist[1])
test_that("afiles 1 check output",{
expect_equal(any(grepl("adm",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("adm",list.files())])
plotMultiline(alist[1:2])
test_that("afiles >1 check output",{
expect_equal(any(grepl("adm",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("adm",list.files())])
plotMultiline(alist[1:2],sortind="Cluster1")
test_that("afiles >1 check output join sort cluster",{
expect_equal(any(grepl("adm",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("adm",list.files())])
plotMultiline(alist[1:2],sortind="all")
test_that("afiles >1 check output join sort all",{
expect_equal(any(grepl("adm",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("adm",list.files())])
context("plotMultiline FF")
flist <- readQ(ffiles)
plotMultiline(flist[1])
test_that("ffiles 1 check output",{
expect_equal(any(grepl("fast",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("fast",list.files())])
plotMultiline(flist[1:2])
test_that("ffiles >1 check output",{
expect_equal(any(grepl("fast",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("fast",list.files())])
plotMultiline(flist[1:2],sortind="Cluster1")
test_that("ffiles >1 check output sort cluster",{
expect_equal(any(grepl("fast",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("fast",list.files())])
plotMultiline(flist[1:2],sortind="all")
test_that("ffiles >1 check output sort all",{
expect_equal(any(grepl("fast",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("fast",list.files())])
context("plotMultiline MC")
plotMultiline(readQ(mcfiles[1]))
test_that("mcfiles 1 check output",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(mcfiles[1:2]))
test_that("mcfiles >1 check output",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(mcfiles[1:2]), sortind="Cluster1")
test_that("mcfiles >1 check output sort cluster",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(mcfiles[1:2]), sortind="all")
test_that("mcfiles >1 check output sort all",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
context("plotMultiline MT")
plotMultiline(readQ(mtfiles[1]))
test_that("mtfiles 1 check output",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(mtfiles[1:2]))
test_that("mtfiles >1 check output",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(mtfiles[1:2]),sortind="Cluster1")
test_that("mtfiles >1 check output sort cluster",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(mtfiles[1:2]),sortind="all")
test_that("mtfiles >1 check output sort all",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
context("plotMultiline MS")
plotMultiline(readQ(msfiles[1]))
test_that("msfiles 1 check output",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(msfiles[1:2]))
test_that("msfiles >1 check output",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(msfiles[1:2]),sortind="Cluster1")
test_that("msfiles >1 check output sort cluster",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
plotMultiline(readQ(msfiles[1:2]),sortind="all")
test_that("msfiles >1 check output sort all",{
expect_equal(any(grepl("basic.+",list.files())),TRUE)
})
if(deleteoutput) file.remove(list.files()[grep("basic.+",list.files())])
setwd("D:/Data/Dropbox/Rwork/pophelperRpackage/working/demo")
library(pophelper)
sessionInfo()
setwd("D:/Data/Dropbox/Rwork/pophelperRpackage/working/demo/demo3")
source('D:/Data/Dropbox/Rwork/pophelperRpackage/v122/tests/testmanual/test-all.R')
sessionInfo()
install.packages("roxygen2")
install.packages(c("Cairo","ggplot2","gridExtra","gtable","tidyr"),dependencies=T)
library(pophelper)
setwd("D:/Data/Dropbox/Rwork/pophelperRpackage/working/demo/demo3")
source('D:/Data/Dropbox/Rwork/pophelperRpackage/v122/tests/testmanual/test-all.R')
sessionInfo()
distructExport(qlist = readQ(afiles)[1:4],grpmean=T)
test_that("exportDistruct Admixture pop mean",{
expect_equal(length(list.files()),4)
})
list.files()
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
if(deleteoutput) unlink(list.files(),recursive=T,force=T)
setwd("D:/Data/Dropbox/Rwork/pophelperRpackage/working/demo/demo3")
pophelper:::getOS()
setwd("~/Desktop/demo")
setwd("~/Desktop/demo/pophelper-demo/STRUCTUREpop_K4-combined-1-distruct")
file.copy(system.file("bin/distruct_linux_1.1_64bit",package="pophelper"),".")
system("chmod 777 distruct_linux_1.1_64bit")
system("./distruct_linux_1.1_64bit")
setwd("~/Desktop/demo")
source('~/Dropbox/Rwork/pophelperRpackage/v122/tests/testmanual/test-all.R')
expect_error(plotRuns(slist[4],splab=NULL))
expect_error(plotRuns(slist[4],splab=NA))
setwd("D:/Data/Dropbox/Rwork/pophelperRpackage/pophelper/vignettes")
library(knitr)
library(rmarkdown)
library(markdown)
#convert RMD to MD
knit("vignette.Rmd", tangle=F, encoding = "utf-8")
#convert MD to html
render("vignette.md",output_format=html_document(
theme="flatly",
highlight="tango",
toc=TRUE,
toc_depth=3,
toc_float=TRUE,
number_sections=TRUE))
# CONVERTING RMARKDOWN TO HTML & PDF
library(knitr)
library(rmarkdown)
library(markdown)
#convert RMD to MD
knit("vignette.Rmd", tangle=F, encoding = "utf-8")
#convert MD to html
render("vignette.md",output_format=html_document(
theme="flatly",
highlight="tango",
toc=TRUE,
toc_depth=3,
toc_float=TRUE,
number_sections=TRUE))
library(pophelper)
# CONVERTING RMARKDOWN TO HTML & PDF
library(knitr)
library(rmarkdown)
library(markdown)
#convert RMD to MD
knit("vignette.Rmd", tangle=F, encoding = "utf-8")
#convert MD to html
render("vignette.md",output_format=html_document(
theme="flatly",
highlight="tango",
toc=TRUE,
toc_depth=3,
toc_float=TRUE,
number_sections=TRUE))
#convert RMD to MD
knit("vignette.Rmd", tangle=F, encoding = "utf-8")
#convert MD to html
render("vignette.md",output_format=html_document(
theme="flatly",
highlight="tango",
toc=TRUE,
toc_depth=3,
toc_float=TRUE,
number_sections=TRUE))
library(pophelper)
library(knitr)
library(rmarkdown)
library(markdown)
#convert RMD to MD
knit("vignette.Rmd", tangle=F, encoding = "utf-8")
#convert MD to html
render("vignette.md",output_format=html_document(
theme="flatly",
highlight="tango",
toc=TRUE,
toc_depth=3,
toc_float=TRUE,
number_sections=TRUE))
library(pophelper)
setwd("C:/Users/Roy/Desktop/demo")
source('D:/Data/Dropbox/Rwork/pophelperRpackage/pophelper/tests/testmanual/test-all.R')
