\documentclass[a4paper]{article}
% \VignettePackage{Vignette}
% \VignetteIndexEntry{pophelper 1.0.0 Demonstration and workflow}

\usepackage{zi4}
\usepackage{fancyhdr}
\usepackage[pdftex]{graphicx}
\usepackage{a4wide}
\usepackage{parskip}
\usepackage{float}
\usepackage[hidelinks]{hyperref}

% Dark blue colour for all links
\RequirePackage{color}
\definecolor{link}{rgb}{0.45,0.51,0.67}
\hypersetup{
  colorlinks,%
  citecolor=link,%
  filecolor=link,%
  linkcolor=link,%
  urlcolor=link
}

\title{\bf \texttt{pophelper 1.0.0} \\ \bf Demonstration and workflow}
\author{ \textbf{Roy M Francis} \\ roy.m.francis@outlook.com}
%begin document
\begin{document}
\SweaveOpts{concordance=TRUE}
\setkeys{Gin}{width=1\textwidth}
\pagestyle{fancy}


%\oddsidemargin = 18pt
%\topmargin = 0pt
%\headheight = 10pt
%\headsep = 25pt
%\textheight = 609pt
%\textwidth = 520pt
%\marginparsep = 11pt
%\marginparwidth = 20pt
%\footskip = 30pt
%\marginparpush = 5pt
%\hoffset = 0pt 
%\voffset = 0pt
%\paperwidth = 597pt 
%\paperheight = 845pt

%SETS HEADERS AND FOOTERS
\lhead{}
\chead{}
\rhead{\slshape \bfseries pophelper 1.0.0}
\lfoot{\slshape R. Francis}
\cfoot{}
\rfoot{\thepage}
\renewcommand{\headrulewidth}{0.6pt}
\renewcommand{\footrulewidth}{0.2pt}

\maketitle
<<results=hide, echo=FALSE>>=
pkgname<-"pophelper"
options(SweaveHooks = list(fig = function() par(mfrow=c(1,1))))
@

This vignette aims to demonstrate the use of R package \texttt{\Sexpr{print(pkgname)}}. This package contains functions that are useful for processing output results from two programs used in the analysis of population structure: 'STRUCTURE' \textsuperscript{4} and 'TESS' \textsuperscript{2}.

The programs 'STRUCTURE' and 'TESS' are two popular programs used to differentiate populations, to determine population structure and to reveal population assignment at an individual level using molecular markers. These programs use allelic frequency information to assign individuals to a predefined number of populations (K). The assignment is usually run for a range of K such as from K=2 to K=10. Multiple repeats are also usually carried out for each K. Each output file for each repeat of K showing the assignment probabilities of all individuals is referred to as the run file or cluster file. \texttt{\Sexpr{print(pkgname)}} has a set of functions such as tabulating runs, summarising runs, plotting runs etc that can be applied to these run files. Several other programs exist for determining population structures such as 'BAPS', 'INSTRUCT', 'GENELAND' etc which will not be covered for now.

This vignette covers the use of all important functions in the \texttt{\Sexpr{print(pkgname)}} package. The demonstration is ordered in the manner of a typical workflow. This demonstration has been performed using \Sexpr{print(version$version.string)} on a Windows 7 Platform x86/64. This vignette has been compiled using \LaTeXe.

Input and output codes are printed in a font different from body text like \texttt{this}. Input codes always start with '\texttt{>}'. If codes break off to the next lines, then they are preceeded by '\texttt{+}'. Output results are in \texttt{this} font but do not start with '\texttt{>}'.

\section{Installation}

The first step is to install the \texttt{\Sexpr{print(pkgname)}} library, which is typically only once. The dependent R packages required for the \texttt{\Sexpr{print(pkgname)}} library as also automatically installed.

<<results=hide,eval=FALSE>>=
install.packages("pophelper",dep=T)
@

The next step is to load the library. This is usually done everytime when starting up R.

<<results=hide>>=
library(pophelper)
@

The installation and version can be verified using the following command.

<<results=verbatim>>=
packageDescription("pophelper", fields = "Version")
@

For functions where one or more files need to be selected, the selection can be performed interactively. Windows users can use \texttt{choose.files(multi=T)}. Mac users can use \texttt{file.choose()} for single selection and \texttt{tk\_choose.files()} from \texttt{tcltk} package for multiple selection.

The next step to set the working directory. The working directory is a folder that usually contains the run files of interest so as to allow R to access it. Functions may produce outputs such as text files or images which will be exported to the working directory. The working directory can be set by running the command below and then selecting the folder interactively in the popup window.

\texttt{setwd(choose.dir())}

For this demonstration, the run files will be loaded from the \texttt{\Sexpr{print(pkgname)}} library. Therefore, the working directory will be used for output generated from various \texttt{\Sexpr{print(pkgname)}} functions.

Standard help and documentation for functions are obtained using \texttt{?}.

<<results=verbatim,echo=TRUE,eval=FALSE>>=
?tabulateRunsStructure
?summariseRunsStructure
?collectRunsTess
@

\section{STRUCTURE Functions}

In this section, we will deal with STRUCTURE output files and the functions that apply to these. The \texttt{\Sexpr{print(pkgname)}} library must be loaded and the working directory must be set.

\subsection{tabulateRunsStructure}

A typical STRUCTURE run produces a large number of output run files as seen in Fig.1.

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig1}
\caption{Typical view of Structure output run files.}
\end{figure}

The function \texttt{tabulateRunsStructure()} can be used to select any number of run files in a folder and produce a table of runs with various parameters. The only mandatory argument required for this function is a character vector of filenames. This function can be run as shown below and the files to be tabulated can be selected interactively using \texttt{choose.files(multi=TRUE)}. The results can be pointed to a variable \texttt{df} for further use.

For this demonstration, we will use the sample structure files accompanied with this library.

<<results=verbatim,echo=TRUE,eval=FALSE>>=
flist<-list.files(path=system.file("/files/structure",package="pophelper"),full.names=T)
df<-tabulateRunsStructure(files=flist)
#common usage
#df<-tabulateRunsStructure(files=choose.files(multi=TRUE))
#another way
#files=choose.files(multi=TRUE)
#df<-tabulateRunsStructure(files=files)
@

<<results=hide,echo=FALSE>>=
#HIDDEN CODE*****************************************
flist<-list.files(path="./files/structure",full.names=T)
df<-tabulateRunsStructure(files=flist)

@

This function produces a tabulated result and shown below.

<<results=verbatim,echo=TRUE>>=
df
@


The \texttt{tabulateRunsStructure()} function produces a table listing all selected files showing 10 columns namely file names, value of K, number of individuals, number of loci, estimated ln probability of data, mean value of ln likelihood, variance of ln likelihood, mean value of alpha, number of burn-in and number of repeats. The table is sorted by loci, ind and K. Missing values are given NA.

By default, the \texttt{tabulateRunsStructure()} function prints the number of selected files as \texttt{Number of files selected: 10}. This can be turned off using the \texttt{quiet} argument as such \texttt{tabulateRunsStructure(files=files,quiet=T)}. The tabulated output can be written to the working directory as a text file by setting the argument \texttt{writetable} like so \texttt{tabulateRunsStructure(files = choose.files(multi=TRUE),writetable=T)}.

\subsection{summariseRunsStructure}

The table produced using \texttt{tabulateRunsStructure()} can be further collapsed by K and number of runs. The output table from \texttt{tabulateRunsStructure()} can be passed as input to \texttt{summariseRunsStructure()}. The summarised table has 6 columns namely Mean estimated ln probability of data, standard deviation, value of K, number of runs for each K, estimated ln probability of data plus standard deviation, estimated ln probability of data minus standard deviation.

<<results=verbatim,echo=TRUE>>=
#usage
df1<-summariseRunsStructure(data=df)
#variant
#summariseRunsStructure(data=tabulateRunsStructure(files=choose.files(multi=TRUE)))
df1
@

The summarised runs can be written to the working directory as a text file by setting the argument \texttt{writetable=T} like so \texttt{summariseRunsStructure(data=df,writetable=T)}.

\subsection{evannoMethodStructure}

The Evanno method \textsuperscript{1} is used to estimate the number of K. The method is based on Evanno et al., (2005) listed in references. The summarised runs table output from \texttt{summariseRunsStructure()} function can be input to \texttt{evannoMethodStructure()}. The \texttt{evannoMethodStructure()} function creates an Evanno derivative plot if suitable conditions are met. A resulting table is also returned. The plot can be written to file using argument \texttt{exportplot=T}. The table can be written to file using \texttt{writetable=T}.

<<results=verbatim,echo=TRUE>>=
#usage
#df2<-evannoMethodStructure(data=df1)
#to export a plot
#evannoMethodStructure(data=df1,exportplot=T)
#evannoMethodStructure(data=df1,doplot=F)
#to export plot and table
evannoMethodStructure(data=df1,exportplot=T,writetable=T,na.rm=T)
@

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig2}
\caption{Plots produced from the Evanno method.}
\end{figure}

The Evanno method can be computed only if these criteria are met: At least 3 values of K must be available, values of K must be sequential (ie; there must not be missing values of K), number of individuals and loci must be same in all runs. If number of repeats for any K is less than 2, then results may not be reliable. In case the Evanno method cannot be computed, a plot of ELPD over K is produced referred to as the kPlot.

From the command above, a png file and text file is exported to the working directory. The peak of deltaK in Fig. plot (D) is usually used to estimate the value of K.

\subsection{runsToDfStructure}

STRUCTURE files can be converted to R dataframes using the function \texttt{runsToDfStructure()}. If one file is selected, a dataframe is returned. If multiple files are selected, then a list of dataframes are returned.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
#usage
df3<-runsToDfStructure(files=flist)
#select files interactively
#df3<-runsToDfStructure(files=choose.files(multi=TRUE))
head(df3[[1]])
head(df3[[3]])
@

<<results=hide,echo=FALSE>>=
#HIDDEN CODE***********************************************
df3<-runsToDfStructure(files=flist)
head(df3[[1]])
head(df3[[3]])
@

The dataframe contains the assignment probabilities of all individuals into K populations denoted as Cluster1, Cluster 2 etc.

\subsection{clumppExportStructure}

When multiple repeats are run for each K in STRUCTURE, the order of clusters may be jumbled for each run. Therefore, when plotting multiple runs within each K, the colours cannot be assigned correctly. The software CLUMPP helps to overcome this issue by reordering the clusters correctly. To read more about CLUMPP \textsuperscript{2}.

<<results=verbatim, echo=TRUE, eval=FALSE>>=
#usage
clumppExportStructure(files=flist)
#select files interactively
#clumppExportStructure(files=choose.files(multi=TRUE))
#optionally change folder name
#clumppExportStructure(files=flist,prefix="Set1")
@

This function \texttt{clumppExportStructure()} takes multiple runs for each K and combines them into a single file and generates a parameter file for easy use with CLUMPP. A combined file and a parameter file are generated for each value of K in separate directories. The name for the folder can be change optionally if required using the argument \texttt{prefix="something"}.

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig3}
\caption{Folders created from clumpp export and the contents of each folder.}
\end{figure}

The CLUMPP executable can be copied and pasted into each of these folder and run by double clicking on it. This generates three output files: aligned file, merged file and misc file. This step must be carried out manually to follow the rest of the demonstration.

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig4}
\caption{Folder showing CLUMPP results: aligned file, merged file and misc file.}
\end{figure}

The aligned file contains all the runs in the combined file after realignment of clusters. In contrast, the merged file contains only one table which merges all the aligned runs to create a consensus run. The merged file makes sense only if all the aligned runs have similar assignments. The miscfile contains run parameters and other details.

\subsection{collectClumppOutput}

The CLUMPP output files are now distributed in multiple folders. The aligned, merged or both files can be copied from multiple folders into a single folder for further analyses using the function \texttt{collectClumppOutput()}. The working directory is set suitably before running this function. This function need a \texttt{prefix} argument which denotes the prefix used in the previous function or the text before the underscore. For ex. a directory named STRUCTUREpop\_K2 has the prefix STRUCTUREpop.

<<results=verbatim, echo=TRUE, eval=FALSE>>=
#usage
#setwd(choose.dir())
#collectClumppOutput(prefix="STRUCTUREpop",filetype="aligned")
#collectClumppOutput(prefix="STRUCTUREpop",filetype="merged")
#working directory can also be set using runsdir argument
#collectClumppOutput(prefix="STRUCTUREpop",filetype="both",runsdir=choose.dir())

collectClumppOutput(prefix="STRUCTUREpop",filetype="both")
@

Collecting the aligned and merged files into a single folder can be helpful in plotting these files. From the command above, both aligned and merged files are copied into a new directory STRUCTUREpop-both within the working directory.

\subsection{plotRuns}

The function \texttt{plotRuns()} is used to create barplots from STRUCTURE run files, TESS run files, combined files, aligned files or merged files. The default usage below (usage 1) creates barplots of all selected files individually/separately. To create a single output figure with all selected files joined together, set argument \texttt{imgoutput="join"}.

<<results=verbatim, echo=TRUE, eval=FALSE>>=
#usage 1 #plot first 2 runs
#plotRuns(files=flist[1:2])
#same as above
plotRuns(files=flist[1:2],imgoutput="sep")
#usage 2, join files into one figure
plotRuns(files=flist[1:2],imgoutput="join")
#
@

\begin{figure}[H]
\centering
\includegraphics[width=10cm]{Fig5}
\caption{(A) Left: Single run plotted separately. (B) Right: Two runs joined together in one image.}
\end{figure}

Population labels can be added to this barplot by providing a vector of labels. The length must be equal to the number of individuals. The labelling is still experimental and may not always give perfect results. This function has numerous arguments to tweak the plot as required. In this demonstration, we will use the labels table in the \texttt{\Sexpr{print(pkgname)}} library. In case of separate plots and joined plots, the labels are shown only once at the bottom of the plot.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
pops<-read.delim(system.file("files/structurepoplabels.txt",package="pophelper"),header=F)
head(pops$V1)
length(pops$V1)
#print label
#plotRuns(files=flist,poplab=pops$V1)
#same as above
plotRuns(files=flist[1],imgoutput="sep",poplab=pops$V1)
#usage 2, join files into one figure
plotRuns(files=flist[1:2],imgoutput="join",poplab=pops$V1)
#adjust angle of labels
#plotRuns(files=flist[1],imgoutput="sep",poplab=pops$V1,labangle=90)
#
@

\begin{figure}[H]
\centering
\includegraphics[width=10cm]{Fig6}
\caption{(A) Left: Single run plotted separately with pop labels. (B) Right: Two runs joined together in one image with pop labels.}
\end{figure}

In similar manner, the \texttt{plotsRuns} function can be used to plot from combined, aligned or merged files. For this set argument \texttt{imgoutput="tab"}.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
tabs1<-c(system.file("files/STRUCTUREpop_K4-combined.txt",package="pophelper"),
          system.file("files/STRUCTUREpop_K4-combined-aligned.txt",package="pophelper"),
          system.file("files/STRUCTUREpop_K4-combined-merged.txt",package="pophelper"))

#usage
plotRuns(files=tabs1,imgoutput="tab")
#with labels
plotRuns(files=tabs1,imgoutput="tab",poplab=pops$V1)
#
@

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig7}
\caption{(A) Left: Combined files (Three STRUCTURE runs for K=4). (B) Middle: Aligned files (Three STRUCTURE runs for K=4 aligned using CLUMPP). (C) Right: Merged file (Three runs for K=4 merged into one table/figure using CLUMPP)}
\end{figure}

\subsection{plotMultiline}

The \texttt{plotMultiline} function is also used to plot STRUCTURE runs, TESS runs and table files as barplots. This function automatically identifies these three input file types. The barplots are plotted in multiple rows to enable easier identification of individuals. The figure is produced on A4 size by default. The number of samples per line (\texttt{spl}) and the number of lines per page (\texttt{lpp}) can be specified.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
plotMultiline(flist[1])
#manually modified
plotMultiline(flist[1],spl=75,lpp=10)
@

Note that this is a slow function and takes several minutes to run depending on number of individuals and number of files selected. The results from above commands is shown below.

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig11}
\caption{Left: Default output from \texttt{plotMultiline}. Right: Modified output.}
\end{figure}

\section{TESS functions}

In this section, we will deal with TESS output files and the functions that apply to these.

\subsection{collectRunsTess}

Unlike STRUCTURE runs which are exported into a single directory, TESS output files are exported into separate directories by run. This means that one needs to go into individual folders to obtain the run file. The function \texttt{collectRunsTess()} collects TESS cluster files from individual run folders into one new folder and renamed by run.

<<results=verbatim,echo=TRUE>>=
#usage
#collectRunsTess(runsdir = choose.dir())
@

Within each TESS run folder, the function searches for filename ending with 'TR.txt' as the cluster file. This file is copied to the new folder and renamed as the name of the respective run directory. Therefore, do not manually rename original run files or directories.

\subsection{tabulateRunsTess}

The \texttt{\Sexpr{print(pkgname)}} library must be loaded and the working directory must be set appropriately. The function \texttt{tabulateRunsTess()} can be used to select any number of TESS run files in a folder and produce a table of runs with filename, K and number of individuals. The only mandatory argument required for this function is a vector of filenames. This can be run as below and the files to be tabulated can be selected interactively using the function \texttt{choose.files(multi=TRUE)}. The results can be pointed to a variable \texttt{df}.

For this demonstration, we will use the sample TESS files accompanied with this library.

<<results=verbatim,echo=TRUE, eval=FALSE>>=
flist1<-list.files(path=system.file("files/tess",package="pophelper"),full.names=T)
df<-tabulateRunsTess(files=flist1)
#common usage
#df<-tabulateRunsTess(files=choose.files(multi=TRUE))
#another way
#flist=choose.files(multi=TRUE)
#df<-tabulateRunsTess(files=flist1)
#write table as text file
#df<-tabulateRunsTess(files=choose.files(multi=TRUE),writetable=T)
@

<<results=hide,echo=FALSE>>=
#HIDDEN CODE***********************************************
flist1<-list.files(path="./files/tess",full.names=T)
df<-tabulateRunsTess(files=flist1)
@

This function produces a tabulated result and shown below. The table is sorted by ind and K.

<<results=verbatim,echo=TRUE>>=
head(df)
@


By default, the \texttt{tabulateRunsTess()} function prints the number of selected files as \texttt{Number of files selected: 10}. This can be turned off using the \texttt{quiet} argument as such \texttt{tabulateRunsTess(files=files),quiet=T}. The tabulated output can be written to the working directory as a text file by setting the option \texttt{writetable} like so \texttt{tabulateRunsTess(files = choose.files(multi=TRUE),writetable=T)}.

\subsection{summariseRunsTess}

This function further condenses the tabulated table by number of runs.

<<results=verbatim,echo=TRUE>>=
df2<-summariseRunsTess(df)
head(df2)
@


\subsection{runsToDfTess}

TESS files can be converted to R dataframes using the function \texttt{runsToDfTess()}. If one file is selected, a dataframe is returned. If multiple files are selected, then a list of dataframes are returned.

<<results=verbatim, echo=TRUE, eval=FALSE>>=
#usage
df3<-runsToDfTess(files=flist1)
#select files interactively
#df3<-runsToDfTess(files=choose.files(multi=TRUE))
head(df3[[1]])
head(df3[[3]])
@

<<results=hide,echo=FALSE>>=
#HIDDEN CODE***********************************************
df3<-runsToDfTess(files=flist1)
@

The dataframe contains the assignment probabilities of all individuals into K populations denoted as Cluster1, Cluster 2 etc.

\subsection{clumppExportTess}

When multiple repeats are run for each K in TESS, the order of clusters may be jumbled for each run. Therefore, when plotting multiple runs within each K, the colours cannot be assigned correctly. The software CLUMPP helps to overcome this issue by reordering the clusters correctly.

<<results=verbatim, echo=TRUE, eval=FALSE>>=
#usage
clumppExportTess(files=flist1)
#select files interactively
#clumppExportTess(files=choose.files(multi=TRUE))
#optionally change folder name
#clumppExportTess(files=flist1,prefix="Set1")
@

This function \texttt{clumppExportTess()} takes multiple runs for each K and combines them into a single file and generates a parameter file for easy use with CLUMPP. A combined file and a parameter file are generated for each value of K in separate directories. The name for the folder can be change optionally if required using the argument \texttt{prefix="something"}.

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig8}
\caption{Left: Output generated from function \texttt{clumppExportTess()}. Middle: Output inside a sample directory. Right: Files generated by running CLUMPP.}
\end{figure}

The CLUMPP executable can be copied and pasted into each of these folder and run by double clicking on them. This generates three output files: aligned file, merged file and misc file. This step must be carried out manually to follow the rest of the demonstration.

The aligned file contained all the runs in the combined file after realignment of clusters. In contrast, the merged file contains only one table which merges all the aligned runs to create a consensus run. The merged file makes sense only if all the aligned runs have similar assignments. The miscfile contains run parameters and other details.

\subsection{collectClumppOutput}

Same function as covered in section STRUCTURE functions. The Clumpp output files are now distributed in multiple folders. The aligned, merged or both files can be copied from multiple folders into a single folder for further analyses using the function \texttt{collectClumppOutput()}. The working directory is set suitably before running this function. This function need a \texttt{prefix} argument which denotes the prefix used in the previous function or the text before the underscore. For ex. a directory named TESSpop\_K2 has the prefix TESSpop.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
#usage
#setwd(choose.dir())
#collectClumppOutput(prefix="TESSpop",filetype="aligned")
#collectClumppOutput(prefix="TESSpop",filetype="merged")
#working directory can also be set using runsdir argument
#collectClumppOutput(prefix="TESSpop",filetype="both",runsdir=choose.dir())

collectClumppOutput(prefix="TESSpop",filetype="both")
@

Collecting the aligned and merged files into a single folder can be helpful in plotting these files. From the command above, both aligned and merged files are copied into a new directory TESSpop-both within the working directory.

\subsection{plotRuns}

Same function as covered in section STRUCTURE functions. The function \texttt{plotRuns()} is used to create barplots from TESS run files, combined files, aligned files or merged files. The default usage below (usage 1) creates barplots of all selected files individually/separately. To create a single output figure with all selected files joined together, set argument \texttt{imgoutput="join"}.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
#usage 1 #plot first 2 runs
#plotRuns(files=flist1[1:2])
#same as above
plotRuns(files=flist1[1:2],imgoutput="sep")
#usage 2, join files into one figure
plotRuns(files=flist1[1:2],imgoutput="join")
#
@

Population labels can be added to this barplot by providing a vector of labels. The length must be equal to the number of individuals. In this demonstration, we will create some sample labels. In case of separate plots and joined plots, the labels are shown only once at the bottom of the plot.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
labs1 <- factor(c(rep("PopA",30),rep("PopB",45)))
length(labs1)
#print label
#plotRuns(files=flist1,poplab=labs)
#same as above
plotRuns(files=flist1[1],imgoutput="sep",poplab=labs1)
#usage 2, join files into one figure
plotRuns(files=flist1[1:2],imgoutput="join",poplab=labs1)
#adjust angle of labels
#plotRuns(files=flist1[1],imgoutput="sep",poplab=labs,labangle=90)
#
@

\begin{figure}[H]
\centering
\includegraphics[width=10cm]{Fig9}
\caption{Sample figures from plotting TESS runs.}
\end{figure}

In similar manner, the \texttt{plotsRuns} function can be used to plot from combined, aligned or merged files. For this set argument \texttt{imgoutput="tab"}.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
tabs2<-c(system.file("files/TESSpop_K5-combined.txt",package="pophelper"),
          system.file("files/TESSpop_K5-combined-aligned.txt",package="pophelper"),
          system.file("files/TESSpop_K5-combined-merged.txt",package="pophelper"))

#usage
plotRuns(files=tabs2,imgoutput="tab")
#with labels
plotRuns(files=tabs2,imgoutput="tab",poplab=labs1)
#
@

\begin{figure}[H]
\centering
\includegraphics[width=12cm]{Fig10}
\caption{(A) Left: Combined files (Three TESS runs for K=5). (B) Middle: Aligned files (Three TESS runs for K=5 aligned using CLUMPP). (C) Right: Merged file (Three runs for K=5 merged into one table/figure using CLUMPP)}
\end{figure}

\subsection{plotMultiline}

The \texttt{plotMultiline} function is also used to plot STRUCTURE runs, TESS runs and table files as barplots. This function automatically identifies these three input file types. The barplots are plotted in multiple rows to enable easier identification of individuals. The figure is produced on A4 size by default. The number of samples per line (\texttt{spl}) and the number of lines per page (\texttt{lpp}) can be specified.

<<results=verbatim, echo=TRUE,eval=FALSE>>=
plotMultiline(flist[1])
plotMultiline(flist[1],spl=75,lpp=10)
@

Note that this is a slow function and takes several minutes to run depending on number of individuals and number of files selected.

\section{Working code}

Here is a list of all functions in a order typical of workflow.

\subsection{Structure}

<<results=verbatim, echo=TRUE,eval=FALSE>>=
#choose files
flist<-choose.files(multi=TRUE)
#tabulate runs
df1<-tabulateRunsStructure(flist)
#summarise runs
df2<-summariseRunsStructure(df1)
#Evanno method
evannoMethodStructure(df2,exportplot=T)
#clumpp export
clumppExportStructure(flist)
#collect clumpp output
collectClumppOutput(prefix="STRUCTUREpop",filetype="aligned")
#plot runs
plotRuns(files=flist)
plotRuns(files=flist,imgoutput="join")
plotRuns(files=choose.files(multi=TRUE),imgoutput="tab")
#plot multiline
plotMultiline(flist[1])
plotMultiline(flist[1],spl=70,lpp=10)
#structure runs to data frame
runsToDfStructure(flist)
@

\subsection{Tess}

<<results=verbatim, echo=TRUE,eval=FALSE>>=
#collect TESS output
collectRunsTess(runsdir=choose.dir())
#choose files
flist<-choose.files(multi=TRUE)
#tabulate runs
df1<-tabulateRunsTess(flist)
#clumpp export
clumppExportTess(flist)
#collect clumpp output
collectClumppOutput(prefix="TESSpop",filetype="aligned")
#plot runs
plotRuns(files=flist)
plotRuns(files=flist,imgoutput="join")
plotRuns(files=choose.files(multi=TRUE),imgoutput="tab")
#plot multiline
plotMultiline(flist[1])
plotMultiline(flist[1],spl=70,lpp=10)
#TESS runs to data frame
runsToDfTess(flist)
@

Some of the same functionalities in this package have been implented in the online tool \texttt{StructureHarvester} by other authors. For those who prefer a GUI, this may be useful. See useful links.

\section{References}

1. Evanno, G., Regnaut, S., and Goudet, J. (2005). Detecting the number of clusters of individuals using the software STRUCTURE: a simulation study. Molecular ecology, 14(8), 2611-2620\\
\href{http://onlinelibrary.wiley.com/doi/10.1111/j.1365-294X.2005.02553.x/abstract}{(Link)}
\url{}

2. Fran\c{c}ois, O., and Durand, E. (2010). Spatially explicit Bayesian clustering models in population genetics. Molecular Ecology Resources, 10(5), 773-784.\\
\href{http://onlinelibrary.wiley.com/doi/10.1111/j.1755-0998.2010.02868.x/abstract}{(Link)}
\url{}

3. Jakobsson, M., and Rosenberg, N. A. (2007). CLUMPP: a cluster matching and permutation program for dealing with label switching and multimodality in analysis of population structure. Bioinformatics, 23(14), 1801-1806.\\
\href{http://bioinformatics.oxfordjournals.org/content/23/14/1801.short}{(Link)}
\url{}

4. Pritchard, J. K., Stephens, M., and Donnelly, P. (2000). Inference of population structure using multilocus genotype data. Genetics, 155(2), 945-959.\\
\href{http://www.genetics.org/content/155/2/945.short}{(Link)}
\url{}

\section{Useful links}

STRUCTURE program\\
\url{http://pritchardlab.stanford.edu/structure.html}

TESS program\\
\url{http://membres-timc.imag.fr/Olivier.Francois/tess.html}

CLUMPP program\\
\url{http://www.stanford.edu/group/rosenberglab/clumpp.html}

Structure Harvester\\
\url{http://taylor0.biology.ucla.edu/structureHarvester}

\textbf{Disclaimer}

The \texttt{pophelper} R package is offered free and without warranty of any kind, either expressed or implied. I will not be held liable to you for any damage arising out of the use, modification or 
inability to use this program. \texttt{pophelper} R package can be used, redistributed and/or modified freely for non-commercial purposes subject to the original source being properly cited. Licensed under GPL-3.

\copyright \  \textbf{2014 Roy M Francis} \ roy.m.francis@outlook.com

\end{document}
